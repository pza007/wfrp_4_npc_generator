from careers_npc import *
from functions import random_pick

# ---- Sex
sex_all = ['Male', 'Female']

# ---- Species
species_all = ["Human", "Dwarf", "Halfling", "High Elf", "Wood Elf", "Gnome"]
species_random = ["Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Human", "Halfling", "Halfling", "Halfling", "Halfling", "Halfling", "Dwarf", "Dwarf", "Dwarf", "High Elf", "Wood Elf", "Gnome", "Gnome"]

# ---- Age
age_all = ['Young', 'Middle', 'Old']
age_Human =    [6,  60//2,  70 ]
age_Dwarf =    [70, 240//2, 240]
age_Halfling = [50, 140//2, 140]
age_HighElf =     [80, 900//2, 900]
age_WoodElf =     [80, 900//2, 900]
age_Gnome =    [40, 400//2, 400]
age_by_species = {'Human': age_Human, 'Dwarf': age_Dwarf, 'Halfling': age_Halfling, 'High Elf': age_HighElf, 'Wood Elf': age_WoodElf, 'Gnome': age_Gnome}

# ---- Height
height_Human =    [1.20, 1.50, 1.40]
height_Dwarf =    [1.04, 1.30, 1.20]
height_Halfling = [0.76, 0.95, 0.80]
height_HighElf =  [1.44, 1.80, 1.65]
height_WoodElf =  [1.44, 1.80, 1.65]
height_Gnome =    [0.80, 1.00, 0.90]
height_by_species = {'Human': height_Human, 'Dwarf': height_Dwarf, 'Halfling': height_Halfling, 'High Elf': height_HighElf, 'Wood Elf': height_WoodElf, 'Gnome': height_Gnome}

# ---- Class
class_all = ["Academic", "Burgher", "Courtier", "Peasant", "Ranger", "Riverfolk", "Rogue", "Warrior"]
class_Human = ['Academic','Academic','Academic','Academic','Academic','Academic','Academic','Academic','Academic','Academic','Academic','Academic','Academic','Academic','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Ranger','Ranger','Ranger','Ranger','Ranger','Ranger','Ranger','Ranger','Ranger','Ranger','Riverfolk','Riverfolk','Riverfolk','Riverfolk','Riverfolk','Riverfolk','Riverfolk','Riverfolk','Riverfolk','Riverfolk','Riverfolk','Riverfolk','Riverfolk','Riverfolk','Rogue','Rogue','Rogue','Rogue','Rogue','Rogue','Rogue','Rogue','Rogue','Rogue','Rogue','Rogue','Rogue','Rogue','Warrior','Warrior','Warrior','Warrior','Warrior','Warrior','Warrior','Warrior','Warrior','Warrior','Warrior','Warrior']
class_Dwarf = ['Academic','Academic','Academic','Academic','Academic','Academic','Academic','Academic','Academic','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Ranger','Ranger','Ranger','Ranger','Ranger','Ranger','Ranger','Ranger','Ranger','Ranger','Ranger','Riverfolk','Riverfolk','Riverfolk','Riverfolk','Riverfolk','Riverfolk','Riverfolk','Riverfolk','Riverfolk','Riverfolk','Riverfolk','Rogue','Rogue','Rogue','Rogue','Rogue','Rogue','Warrior','Warrior','Warrior','Warrior','Warrior','Warrior','Warrior','Warrior','Warrior','Warrior','Warrior','Warrior','Warrior','Warrior','Warrior','Warrior']
class_Halfling = ['Academic','Academic','Academic','Academic','Academic','Academic','Academic','Academic','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Ranger','Ranger','Ranger','Ranger','Ranger','Ranger','Ranger','Ranger','Ranger','Ranger','Ranger','Riverfolk','Riverfolk','Riverfolk','Riverfolk','Riverfolk','Riverfolk','Riverfolk','Riverfolk','Riverfolk','Riverfolk','Riverfolk','Riverfolk','Riverfolk','Riverfolk','Rogue','Rogue','Rogue','Rogue','Rogue','Rogue','Rogue','Rogue','Rogue','Rogue','Rogue','Rogue','Warrior','Warrior','Warrior','Warrior','Warrior','Warrior']
class_HighElf = ['Academic','Academic','Academic','Academic','Academic','Academic','Academic','Academic','Academic','Academic','Academic','Academic','Academic','Academic','Academic','Academic','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Ranger','Ranger','Ranger','Ranger','Ranger','Ranger','Ranger','Riverfolk','Riverfolk','Riverfolk','Riverfolk','Riverfolk','Riverfolk','Riverfolk','Riverfolk','Riverfolk','Riverfolk','Riverfolk','Riverfolk','Riverfolk','Riverfolk','Riverfolk','Riverfolk','Riverfolk','Rogue','Rogue','Rogue','Rogue','Rogue','Rogue','Rogue','Rogue','Warrior','Warrior','Warrior','Warrior','Warrior','Warrior','Warrior','Warrior','Warrior','Warrior','Warrior','Warrior']
class_WoodElf = ['Academic','Academic','Academic','Academic','Academic','Burgher','Burgher','Burgher','Burgher','Burgher','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Ranger','Ranger','Ranger','Ranger','Ranger','Ranger','Ranger','Ranger','Ranger','Ranger','Riverfolk','Rogue','Rogue','Rogue','Rogue','Rogue','Rogue','Warrior','Warrior','Warrior','Warrior','Warrior','Warrior','Warrior','Warrior','Warrior','Warrior','Warrior','Warrior','Warrior','Warrior','Warrior']
class_Gnome = ['Academic','Academic','Academic','Academic','Academic','Academic','Academic','Academic','Academic','Academic','Academic','Academic','Academic','Academic','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Burgher','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Courtier','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Peasant','Ranger','Ranger','Ranger','Ranger','Ranger','Ranger','Ranger','Ranger','Ranger','Ranger','Ranger','Ranger','Ranger','Riverfolk','Riverfolk','Riverfolk','Riverfolk','Riverfolk','Riverfolk','Riverfolk','Riverfolk','Riverfolk','Rogue','Rogue','Rogue','Rogue','Rogue','Rogue','Rogue','Rogue','Rogue','Rogue','Rogue','Rogue','Rogue','Rogue','Warrior','Warrior']
class_by_species = {'Human': class_Human, 'Dwarf': class_Dwarf, 'Halfling': class_Halfling, 'High Elf': class_HighElf, 'Wood Elf': class_WoodElf, 'Gnome': class_Gnome}

# ---- Career
career_Human = ['Apothecary','Engineer','Lawyer','Nun','Nun','Physician','Priest','Priest','Priest','Priest','Priest','Scholar','Scholar','Wizard','Agitator','Artisan','Artisan','Beggar','Beggar','Investigator','Merchant','Rat Catcher','Rat Catcher','Townsman','Townsman','Townsman','Watchman','Advisor','Artist','Duellist','Envoy','Noble','Servant','Servant','Servant','Spy','Warden','Bailiff','Hedge Witch','Herbalist','Hunter','Hunter','Miner','Mystic','Scout','Villager','Villager','Villager','Villager','Villager','Bounty Hunter','Coachman','Entertainer','Entertainer','Flagellant','Flagellant','Messenger','Pedlar','Roadwarden','Witch Hunter','Boatman','Boatman','Huffer','Riverwarden','Riverwarden','Riverwoman','Riverwoman','Riverwoman','Seaman','Seaman','Smuggler','Stevedore','Stevedore','Wrecker','Bawd','Bawd','Charlatan','Fence','Grave Robber','Outlaw','Outlaw','Outlaw','Outlaw','Racketeer','Thief','Thief','Thief','Witch','Cavalryman','Cavalryman','Guard','Guard','Knight','Pit Fighter','Protagonist','Soldier','Soldier','Soldier','Soldier','Warrior Priest']
career_Dwarf = ['Apothecary','Engineer','Engineer','Engineer','Lawyer','Lawyer','Physician','Scholar','Scholar','Agitator','Agitator','Artisan','Artisan','Artisan','Artisan','Artisan','Artisan','Beggar','Investigator','Investigator','Merchant','Merchant','Merchant','Merchant','Rat Catcher','Townsman','Townsman','Townsman','Townsman','Townsman','Townsman','Watchman','Watchman','Watchman','Advisor','Advisor','Artist','Duellist','Envoy','Envoy','Noble','Servant','Spy','Warden','Warden','Bailiff','Bailiff','Hunter','Hunter','Miner','Miner','Miner','Miner','Miner','Scout','Villager','Bounty Hunter','Bounty Hunter','Bounty Hunter','Bounty Hunter','Coachman','Entertainer','Entertainer','Messenger','Messenger','Pedlar','Pedlar','Boatman','Boatman','Huffer','Riverwoman','Riverwoman','Seaman','Smuggler','Smuggler','Stevedore','Stevedore','Wrecker','Fence','Outlaw','Outlaw','Outlaw','Racketeer','Thief','Guard','Guard','Guard','Pit Fighter','Pit Fighter','Pit Fighter','Protagonist','Protagonist','Protagonist','Soldier','Soldier','Soldier','Giant Slayer','Giant Slayer','Giant Slayer','Giant Slayer']
career_Halfling = ['Apothecary','Engineer','Lawyer','Lawyer','Physician','Physician','Scholar','Scholar','Agitator','Agitator','Artisan','Artisan','Artisan','Artisan','Artisan','Beggar','Beggar','Beggar','Beggar','Investigator','Investigator','Merchant','Merchant','Merchant','Merchant','Rat Catcher','Rat Catcher','Rat Catcher','Townsman','Townsman','Townsman','Watchman','Watchman','Advisor','Artist','Artist','Envoy','Servant','Servant','Servant','Servant','Servant','Servant','Spy','Warden','Warden','Bailiff','Herbalist','Herbalist','Herbalist','Hunter','Hunter','Miner','Scout','Villager','Villager','Villager','Bounty Hunter','Coachman','Coachman','Entertainer','Entertainer','Entertainer','Messenger','Messenger','Pedlar','Pedlar','Roadwarden','Boatman','Huffer','Riverwarden','Riverwoman','Riverwoman','Riverwoman','Seaman','Smuggler','Smuggler','Smuggler','Smuggler','Stevedore','Stevedore','Stevedore','Bawd','Bawd','Bawd','Charlatan','Fence','Grave Robber','Outlaw','Racketeer','Thief','Thief','Thief','Thief','Guard','Guard','Pit Fighter','Soldier','Soldier','Soldier']
career_HighElf = ['Apothecary','Apothecary','Lawyer','Lawyer','Lawyer','Lawyer','Physician','Physician','Scholar','Scholar','Scholar','Scholar','Wizard','Wizard','Wizard','Wizard','Artisan','Artisan','Artisan','Investigator','Investigator','Merchant','Merchant','Merchant','Merchant','Merchant','Townsman','Townsman','Watchman','Advisor','Advisor','Artist','Duellist','Duellist','Envoy','Envoy','Envoy','Noble','Noble','Noble','Spy','Spy','Spy','Warden','Warden','Herbalist','Herbalist','Hunter','Hunter','Hunter','Scout','Scout','Scout','Scout','Scout','Scout','Bounty Hunter','Bounty Hunter','Bounty Hunter','Entertainer','Entertainer','Entertainer','Messenger','Boatman','Seaman','Seaman','Seaman','Seaman','Seaman','Seaman','Seaman','Seaman','Seaman','Seaman','Seaman','Seaman','Seaman','Seaman','Seaman','Smuggler','Bawd','Bawd','Charlatan','Charlatan','Charlatan','Outlaw','Outlaw','Outlaw','Cavalryman','Cavalryman','Cavalryman','Cavalryman','Guard','Guard','Knight','Pit Fighter','Pit Fighter','Protagonist','Soldier','Soldier']
career_WoodElf = ['Scholar','Wizard','Wizard','Wizard','Wizard','Artisan','Artisan','Artisan','Artisan','Artisan','Advisor','Advisor','Advisor','Advisor','Artist','Artist','Artist','Artist','Envoy','Envoy','Envoy','Envoy','Envoy','Envoy','Envoy','Noble','Noble','Noble','Noble','Noble','Noble','Herbalist','Herbalist','Herbalist','Herbalist','Herbalist','Herbalist','Herbalist','Herbalist','Herbalist','Herbalist','Herbalist','Hunter','Hunter','Hunter','Hunter','Hunter','Hunter','Hunter','Hunter','Hunter','Hunter','Mystic','Mystic','Mystic','Mystic','Mystic','Scout','Scout','Scout','Scout','Scout','Scout','Scout','Scout','Scout','Scout','Scout','Bounty Hunter','Bounty Hunter','Entertainer','Entertainer','Entertainer','Entertainer','Entertainer','Messenger','Messenger','Messenger','Wrecker','Outlaw','Outlaw','Outlaw','Outlaw','Outlaw','Outlaw','Cavalryman','Cavalryman','Cavalryman','Cavalryman','Cavalryman','Guard','Guard','Knight','Knight','Pit Fighter','Pit Fighter','Soldier','Soldier','Soldier','Soldier']
career_Gnome = ['Apothecary','Lawyer','Physician','Physician','Priest','Scholar','Scholar','Wizard','Wizard','Wizard','Wizard','Wizard','Wizard','Wizard','Agitator','Artisan','Artisan','Beggar','Investigator','Merchant','Merchant','Rat Catcher','Townsman','Townsman','Townsman','Townsman','Townsman','Townsman','Watchman','Advisor','Artist','Envoy','Noble','Servant','Servant','Spy','Spy','Spy','Spy','Spy','Warden','Warden','Bailiff','Herbalist','Hunter','Hunter','Miner','Miner','Miner','Miner','Miner','Miner','Miner','Miner','Scout','Scout','Scout','Scout','Villager','Villager','Villager','Villager','Bounty Hunter','Entertainer','Entertainer','Entertainer','Entertainer','Entertainer','Messenger','Pedlar','Pedlar','Pedlar','Pedlar','Pedlar','Pedlar','Boatman','Riverwarden','Riverwarden','Riverwarden','Riverwarden','Smuggler','Smuggler','Smuggler','Bawd','Bawd','Charlatan','Charlatan','Charlatan','Charlatan','Charlatan','Fence','Outlaw','Racketeer','Racketeer','Thief','Thief','Thief','Thief','Guard','Soldier']
careers_by_species = {'Human': career_Human, 'Dwarf': career_Dwarf, 'Halfling': career_Halfling, 'High Elf': career_HighElf, 'Wood Elf': career_WoodElf, 'Gnome': career_Gnome}
careers_by_class = {'Academic': ['Apothecary', 'Engineer', 'Lawyer', 'Nun', 'Physician', 'Priest', 'Scholar', 'Wizard'],
                    'Burgher': ['Agitator', 'Artisan', 'Beggar', 'Investigator', 'Merchant', 'Rat Catcher', 'Townsman', 'Watchman'],
                    'Courtier': ['Advisor', 'Artist', 'Duellist', 'Envoy', 'Noble', 'Servant', 'Spy', 'Warden'],
                    'Peasant': ['Bailiff', 'Hedge Witch', 'Herbalist', 'Hunter', 'Miner', 'Mystic', 'Scout', 'Villager'],
                    'Ranger': ['Bounty Hunter', 'Coachman', 'Entertainer', 'Flagellant', 'Messenger', 'Pedlar', 'Roadwarden', 'Witch Hunter'],
                    'Riverfolk': ['Boatman', 'Huffer', 'Riverwarden', 'Riverwoman', 'Seaman', 'Smuggler', 'Stevedore', 'Wrecker'],
                    'Rogue': ['Bawd', 'Charlatan', 'Fence', 'Grave Robber', 'Outlaw', 'Racketeer', 'Thief', 'Witch'],
                    'Warrior': ['Cavalryman', 'Guard', 'Knight', 'Pit Fighter', 'Protagonist', 'Soldier', 'Giant Slayer', 'Warrior Priest']}
careers_all = {"Apothecary":CareerApothecary, "Engineer":CareerEngineer, "Lawyer":CareerLawyer, "Nun":CareerNun, "Physician":CareerPhysician, "Priest":CareerPriest, "Scholar":CareerScholar, "Wizard":CareerWizard, "Agitator":CareerAgitator, "Artisan":CareerArtisan, "Beggar":CareerBeggar, "Investigator":CareerInvestigator, "Merchant":CareerMerchant, "Rat Catcher":CareerRatCatcher, "Townsman":CareerTownsman, "Watchman":CareerWatchman, "Advisor":CareerAdvisor, "Artist":CareerArtist, "Duellist":CareerDuellist, "Envoy":CareerEnvoy, "Noble":CareerNoble, "Servant":CareerServant, "Spy":CareerSpy, "Warden":CareerWarden, "Bailiff":CareerBailiff, "Hedge Witch":CareerHedgeWitch, "Herbalist":CareerHerbalist, "Hunter":CareerHunter, "Miner":CareerMiner, "Mystic":CareerMystic, "Scout":CareerScout, "Villager":CareerVillager, "Bounty Hunter":CareerBountyHunter, "Coachman":CareerCoachman, "Entertainer":CareerEntertainer, "Flagellant":CareerFlagellant, "Messenger":CareerMessenger, "Pedlar":CareerPedlar, "Roadwarden":CareerRoadwarden, "Witch Hunter":CareerWitchHunter, "Boatman":CareerBoatman, "Huffer":CareerHuffer, "Riverwoman":CareerRiverwoman, "Riverwarden":CareerRiverwarden, "Seaman":CareerSeaman, "Smuggler":CareerSmuggler, "Stevedore":CareerStevedore, "Wrecker":CareerWrecker, "Bawd":CareerBawd, "Charlatan":CareerCharlatan, "Fence":CareerFence, "Grave Robber":CareerGraveRobber, "Outlaw":CareerOutlaw, "Racketeer":CareerRacketeer, "Thief":CareerThief, "Witch":CareerWitch, "Cavalryman":CareerCavalryman, "Guard":CareerGuard, "Knight":CareerKnight, "Pit Fighter":CareerPitFighter, "Protagonist":CareerProtagonist, "Soldier":CareerSoldier, "Giant Slayer":CareerGiantSlayer, "Warrior Priest":CareerWarriorPriest}

# ---- Names and Surnames
names_Male_Human = ["Armin", "Adolf", "Adolphus", "Albrecht", "Alexander", "Aldred", "Alfred", "Anders", "Anton", "Axel", "Bernard", "Bernd", "Bert", "Boris", "Bruno", "Chedwic", "Christian", "Christoph", "Claus", "Clemons", "Conrad", "Konrad", "Dahlbert", "Detlef", "Dieter", "Dirk", "Erberhardt", "Erik", "Erich", "Ernst", "Erwin", "Erzbet", "Felix", "Franz", "Friedrich", "Fredrick", "Fritz", "Georg", "Gerd", "Gotz", "Gregor", "Gunter", "Gunther", "Gustav", "Hannes", "Hans", "Hanzi", "Heiner", "Heinrich", "Heinz", "Hieronymus", "Helmut", "Henri", "Holger", "Ingo", "Jens", "Joachim", "Johann", "Johannes", "Jonas", "Jorg", "Josef", "Jurgen", "Kaster", "Karl", "Klaus", "Knud", "Konrad", "Kurt", "Lou", "Luitpold", "Manfred", "Marius", "Max (Maximilian)", "Mathieu", "Matthias", "Mikhail", "Mortmore", "Nathaniel", "Nicholas", "Nicholaus", "Nikolaus", "Norbert", "Oswald", "Otto", "Paulus", "Peter", "Rainer", "Reiner", "Rolf", "Rudger", "Rudolf", "Rudolph", "Ruy", "Sepp", "Siegfried", "Stefan", "Sven", "Thadius", "Theodor", "Udo", "Ulrich", "Ulrike", "Volker", "Werner", "Wiesel", "Wilhelm", "Wim", "Wolf", "Wolfgang", "Adalbert", "Adam", "Adolf", "Adolphus", "Albert", "Albrecht", "Aldred", "Alexander", "Axel", "Alfons", "Alfred", "Alois", "Aloisius", "Andreas", "Anders", "Anton", "Antonius", "Armin", "Arnold", "Arthur", "August", "Augustus", "Balthasar", "Benedikt", "Bernhard", "Benno", "Bernd", "Berthold", "Bartolomeus", "Bertram", "Bonifatius", "Clemens", "Cyrilus", "Daniel", "David", "Detlef", "Dettel", "Dieter", "Dieterich", "Dirk", "Eberhard", "Edgar", "Edler", "Edmund", "Eduard", "Ede", "Egolf", "Egon", "Eitel", "Elmar", "Elmer", "Emil", "Emilius", "Erhard", "Erich", "Erik", "Ernst", "Erwin", "Eugen", "Fabian", "Felix", "Ferdinand", "Ferdl", "Florian", "Frank", "Franz", "Francius", "Friedrich", "Frieder", "Fritz", "Gabriel", "Georg", "Gerhard", "Gerd", "Gotz", "Gregor", "Gunter", "Gustav", "Gustavus", "Harald", "Heinrich", "Heiner", "Heinz", "Herbert", "Heribert", "Hermann", "Arminius", "Hieronymus", "Holger", "Hubert", "Hugo", "Ignaz", "Ignatius", "Isidor", "Jakob", "Jacobus", "Joachim", "Achim", "Jochen", "Johannes", "Hans", "Hannes", "Jonas", "Jonathan", "Jorg", "Josef", "Josephus", "Sepp", "Julius", "Jurgen", "Karl", "Carolus", "Kasimir", "Kaster", "Castor", "Kaspar", "Kasper", "Caspar", "Knut", "Konrad", "Conrad", "Konz", "Konstantin", "Kurt", "Laurenz", "Lorenz", "Laurentius", "Leonhard", "Leo", "Ludwig", "Lodeweik", "Luitpold", "Lutz", "Manfred", "Marius", "Markus", "Martin", "Mathias", "Mattheus", "Maximilian", "Max", "Melchior", "Michael", "Michel", "Moritz", "Nathan", "Nikolaus", "Niklas", "Klaus", "Norbert", "Olaf", "Oskar", "Oswald", "Otto", "Paul", "Paulus", "Peter", "Petrus", "Philipp", "Philippus", "Pius", "Raimund", "Reimund", "Rainer", "Reiner", "Richard", "Robert", "Bert", "Roland", "Rudiger", "Rudger", "Roger", "Rudolf", "Rolf", "Rudi", "Ruprecht", "Rupert", "Samuel", "Siegfried", "Silvester", "Simon", "Stefan", "Stephan", "Steffen", "Sven", "Thadeus", "Theodor", "Theo", "Thomas", "Timotheus", "Titus", "Tobias", "Udo", "Ulrich", "Valentin", "Veit", "Viktor", "Volkmar", "Volker", "Walter", "Wendel", "Werner", "Wolfgang", "Wolf", "Wilhelm", "Wili", "Zacharias"]
names_Male_Dwarf = ["Adrik", "Alberich", "Baern", "Barendd", "Brouor", "Bruenor", "Dain", "Darrak", "Delg", "Eberk", "Einkil", "Fargrim", "Flint", "Gardain", "Harbek", "Kildrak", "Morgran", "Orsik", "Oskar", "Rangrim", "Rurik", "Taklinn", "Thoradin", "Thorin", "Tordek", "Traubon", "Travok", "Ulfgar", "Veit", "Vondal", "Alrik", "Bronda", "Dimzad", "Fenna", "Gottri", "Gudrun", "Snorri"]
names_Male_Halfling = ["Alton", "Ander", "Cade", "Corrin", "Eldon", "Errich, ", "Finnan", "Garret", "Lindal", "Lyle", "Merrie", "Milo", "Osborn", "Perrin", "Reed", "Roscoe", "Wellby", "Ferdinand", "Heironymus", "Maximillian", "Theodosius"]
names_Male_Elf = ["Adran", "Aelar", "Aramil", "Arannis", "Aust", "Beiro", "Berrian", "Carrie", "Enialis", "Erdan", "Erevan", "Galinndan", "Hadarai", "Heian", "Himo", "Immeral", "Ivellios", "Laucian", "Mindartis", "Paelias", "Peren", "Quarion", "Riardol", "Rolen", "Soveliss", "Thamior", "Tharivol", "Theren", "Varis"]
names_Male_Gnome = ["Breward", "Daveth", "Gwinear", "Mawnan", "Meriasek", "Nivet", "Talan", "Ytel"]
names_male_by_species = {'Human': names_Male_Human, 'Dwarf': names_Male_Dwarf, 'Halfling': names_Male_Halfling, 'High Elf': names_Male_Elf, 'Wood Elf': names_Male_Elf, 'Gnome': names_Male_Gnome}
names_Female_Human = ["Andrea", "Angelika", "Anita", "Anna-Lise", "Astrid", "Brigid", "Brigitte", "Camilla", "Celeste", "Charlotte", "Christa", "Christiane", "Clementine", "Cordula", "Daniele", "Doris", "Eva", "Edda", "Edith", "Elga", "Elisabeth", "Elixabet", "Ellen", "Etti", "Frances", "Frieda", "Gabriel e", "Gaby", "Gerd", "Gertrud", "Gisela", "Gloria", "Hanna", "Hanni", "Hannelore", "Heidi", "Helena", "Helene", "Helga", "Helke", "Helma", "Henriette", "Ingrid", "Karin", "Karina", "Katharina", "Kathe", "Katrin", "Julianne", "Lena", "Lile", "Lilian", "Lisa", "Liv", "Magdalene", "Margret", "Margarethe", "Magrit", "Maria", "Mariann", "Marianne", "Marlene", "Marthe", "Mel ory", "Monika", "Nadja", "Nastassja", "Natja", "Oliva", "Rena", "Rosa", "Ruth", "Sybil e", "Tatjana", "Uli", "Ursula", "Vera", "Veronika", "Winifred", "Yella", "Yvette", "Dagmar", "Adelheid", "Heide", "Agathe", "Agatha", "Agnes", "Alexandra", "Alexa", "Alix", "Andrea", "Angelika", "Anna", "Anne", "Anneliese", "Annette", "Antonia", "Augusta", "Beata", "Beate", "Bertha", "Berthe", "Brigitte", "Gitte", "Britta", "Cacilie", "Camila", "Carola", "Karola", "Charlotte", "Lotte", "Claudia", "Clementine", "Cordula", "Cornelia", "Kornelia", "Daniela", "Dora", "Doris", "Dorothea", "Edda", "Edith", "Eleonore", "Elisabeth", "Elsbeth", "Elsa", "Lisbeth", "Elke", "Elen", "Else", "Elvira", "Emilie", "Emilia", "Erika", "Esther", "Eugenie", "Eva", "Felicitas", "Franka", "Franza", "Franziska", "Franzi", "Frieda", "Friederike", "Gabriele", "Gerda", "Gertraud", "Gertraut", "Gertrude", "Gisela", "Gloria", "Hanna", "Hannelore", "Hedwig", "Helene", "Helena", "Helga", "Helma", "Henriette", "Hildegard", "Hilde", "Ida", "Ilse", "Ina", "Ingrid", "Isabela", "Isadora", "Isolde", "Johanna", "Josephine", "Judith", "Jutta", "Juliane", "Julia", "Karin", "Karla", "Karoline", "Katharina", "Kathe", "Kathrin", "Leonore", "Liliane", "Lore", "Luise", "Luzia", "Magda", "Magdalene", "Lene", "Lena", "Margarete", "Margareta", "Gretel", "Margit", "Margot", "Marie", "Marianne", "Marion", "Marlene", "Martha", "Marthe", "Mathilde", "Michaela", "Monika", "Nadja", "Ottilie", "Paula", "Petra", "Rebekka", "Regina", "Regine", "Renate", "Renata", "Rikarda", "Rosa", "Ruth", "Sabine", "Sibyle", "Silvia", "Sophie", "Stefanie", "Stephanie", "Susanne", "Susanna", "Therese", "Ulrike", "Ursula", "Ursel", "Valentina", "Verena", "Vera", "Veronika", "Viktoria", "Wilhelmine", "Winifred"]
names_Female_Dwarf = ["Amber", "Artin", "Audhild", "Bardryn", "Dagnal", "Diesa", "Eldeth", "Falkrunn", "Finellen", "Gunnloda", "Gurdis", "Helja", "Hlin", "Kathra", "Kristryd", "Hilde", "Liftrasa", "Mardred", "Riswynn", "Sannl", "Torbera", "Torgga", "Vistra"]
names_Female_Halfling = ["Andry", "Bree", "Callie", "Cora", "Euphemia", "Jillian", "Kithri", "Lavinia", "Lidda", "Meda", "Nedda", "Paela", "Portia", "Seraphina", "Shaena", "Trym", "Vani", "Verna", "Antoniella", "Esmerelda", "Thomasina"]
names_Female_Elf = ["Adrie", "Althaea", "Anastrianna, ", "Andraste", "Antinua", "Bethrynna", "Birel", "Caelynn, ", "Drusilia", "Enna", "Felosial", "Ielenia", "Jelenneth", "Keyleth", "Leshanna", "Lia", "Meriele", "Mialee", "Naivara", "Quelenna", "Quillathe", "Sariel", "Shanairra", "Shava", "Silaqui", "Theirastra", "Thia", "Vadania", "Valanthe", "Xanaphia"]
names_Female_Gnome = ["Elowen", "Ia", "Kerra", "Ladoca", "Metheven", "Morren", "Steren", "Tryfena"]
names_female_by_species = {'Human': names_Female_Human, 'Dwarf': names_Female_Dwarf, 'Halfling': names_Female_Halfling, 'High Elf': names_Female_Elf, 'Wood Elf': names_Female_Elf, 'Gnome': names_Female_Gnome}
names_by_sex = {'Male': names_male_by_species, 'Female': names_female_by_species}
#--
surnames_Human = ["Abel", "Abend", "Abendrot", "Achenbach", "Ackermann", "Adler", "Albers", "Alendorf", "Alsheimer", "Alt", "Arndt", "Aschendorf", "Baer", "Baumann", "Berger", "Biedenkopf", "Blacher", "Blech", "Blum", "Bockenheim", "Bohm", "Bohne", "Bohnen", "Bol", "Bormann", "Bornheim", "Brandauer", "Brahms", "Bratsch", "Braun", "Bremer", "Bruck", "Brunkhorst", "Brustelin", "Buchwald", "Carow", "Castel", "Clausewitz", "Clemm", "Cloos", "Delschaft", "Dickopf", "Dietrich", "Diffring", "Dissel", "Dornbusch", "Dreckspatz", "Dabisch", "Damm", "Datz", "Daube", "Denker", "Diestelmeyer", "Dippel", "Dirnbach", "Dolinger", "Donner", "Dreyer", "Duster", "Dastein", "Eberlein", "Ebert", "Eckstein", "Edel", "Eibl", "Eifer", "Eiferer", "Eigenbrot", "Eckmann", "Emmel", "Engels", "Ensslin", "Erbach", "Eschenheim", "Fabel", "Faler", "Fassbinder", "Fassnacht", "Feder", "Feiler", "Feldmann", "Feuerbach", "Feyerabend", "Fischer", "Fleischer", "Frei", "Freihof", "Fritsch", "Fuchs", "Ganz", "Gehweiler", "Geissler", "Gickel", "Glaubrecht", "Goetz", "Goldstein", "Gottschalk", "Grau", "Grasser", "Griem", "Grobschnitt", "Gronemeyer", "Gschwendtner", "Guhne", "Gunzberg", "Gutmann", "Haak", "Hack", "Harnisch", "Hartwig", "Hasen", "Hasener", "Hassel", "Heinemann", "Helfrich", "Hermann", "Hinfalig", "Hintz", "Hockschwarzer", "Hofbauer", "Hoffmann", "Hoger", "Holzkrug", "Holt", "Horn", "Jaeger", "Jackel", "Junghans", "Kahl", "Kannicher", "Kant", "Karge", "Kaufmann", "Keler", "Keush", "Keilgeld", "Kier", "Klammer", "Kleist", "Kluge", "Knopp", "Kochel", "Kohl", "Konigs", "Kopp", "Korff", "Korte", "Kortner", "Krauss", "Kreuzer", "Kroetz", "Kronenhof", "Kruck", "Krug", "Kruger", "Kummer", "Ladengast", "Lang", "Langen", "Laubrich", "Lauschen", "Leinweber", "Leipnitz", "Lenz", "Lesch", "Liebenfels", "Lochner", "Lommel", "Lupenrein", "Mack", "Macken", "Magen", "Maier", "Mankau", "Manzel", "Marx", "Mattes", "Meier", "Melinger", "Messner", "Moseke", "Moos", "Moser", "Muler", "Murnau", "Nagel", "Nass", "Neubauer", "Nieden", "Nol", "Nutzniesser", "Oberlander", "Offen", "Olbricht", "Oldenhaler", "Osten", "Otterbach", "Pabst", "Palenberg", "Panke", "Patzer", "Peilstock", "Pfeffer", "Plotz", "Pommer", "Praunheim", "Raab", "Rabeneck", "Radmacher", "Reich", "Reitsmann", "Reitz", "Reusse", "Rommel", "Rotlander", "Rudiger", "Rupp", "Sagebrecht", "Sander", "Sauber", "Schaden", "Schaake", "Schauble", "Schenk", "Scheydt", "Schnel", "Schondorff", "Schubert", "Schmidt", "Schwanenheim", "Semmelrogge", "Sierck", "Silber", "Sinkel", "Speilhalter", "Steinhoff", "Stratz", "Stumpfnase", "Tauber", "Tetzel", "Tiele", "Tietmeyer", "Tischer", "Trapp", "Treuer", "Trommler", "Ulmann", "Uebele", "Ulbricht", "Unverzagt", "Unzeit", "Veigl", "Vieweg", "Viertel", "Vocken", "Vogel", "Vogler", "Wagner", "Weinrich", "Weizsacker", "Wennemann", "Wegener", "Weyrauch", "Wiene", "Winkler", "Winterstein", "Witzen", "Wolkenstein", "Zech", "Zieren", "Zimmermann", "Zischer", "Zopf", "Zweifel", "Klauen", "Karge", "Shcatten", "Mittel", "Drakens", "Grau", "Axtschlagpass", "Gross", "Reik", "Meut", "Niderreik", "Dunkelfeuerpass", "Schwarz", "Duster", "Dach", "Welten"]
surnames_Dwarf = ["Balderk", "Battlehammer", "Brawnanvil", "Dankil", "Fireforge", "Frostbeard", "Gorunn", "Holderhek", "Ironfist", "Loderr", "Lutgehr", "Rumnaheim", "Strakelin", "Torunn", "Ungart", "Baragraz", "Durak", "Galazil", "Gnoldok", "Nazril", "Okri", "Ardrungan", "Bryntok", "Gazani", "Gromheld", "Harrazlings", "Unboki", "Dokkintroll", "Ganvalgger", "Kvitang", "Thrungtak", "Wyrgrinti", "Zankonk"]
surnames_Halfling = ["Brushgather", "Goodbarrel", "Greenbottle", "High-hill", "Hilltopple", "Leagallow", "Tealeaf", "Thorngage", "Tosscobble", "Underbough", "Ashfield", "Brandysnap", "Hayfoot", "Rumster", "Shortbottom", "Thorncobble"]
surnames_Elf = ["Amakiir(Gemflower)", "Amastacia(Starflower)", "Galanodel(Moonwhisper)", "Holimion(Diamonddew)", "Ilphelkiir(Gemblossom)", "Liadon(Silverfrond)", "Meliamne(Oakenheel)", "Natlo(Nightbreeze)", "Siannodel(Moonbrook)", "Xiloscient(Goldpetal)", "Emberfell", "Fireborn", "Foamheart", "Goldenhair", "Silverspray", "Spellsign", "Fleetriver", "Shadowstalker", "Treeshaper", "Weavewatcher", "Willowlimb", "Windrunner"]
surnames_Gnome = ["annearil", "Fraine", "Hawken", "Landweth", "Peddlar", "Scantleburn", "Thorne", "Trethewey"]
surnames_by_species = {'Human': surnames_Human, 'Dwarf': surnames_Dwarf, 'Halfling': surnames_Halfling, 'High Elf': surnames_Elf, 'Wood Elf': surnames_Elf, 'Gnome': surnames_Gnome}
#--
surname_Suffix_Human = ["burg", "berg", "stein", "stock", "wald"]
surname_Suffix_Male_Dwarf = ["sson", "sson", "sson", "snev"]
surname_Suffix_Female_Dwarf = ["sdottir", "sdottir", "sdottir", "sniz"]

# ---- Stats
attributes_Human = {"WS": 20, "BS": 20, "S":  20, "T":  20, "AG": 20, "I":  20, "DEX": 20, "INT": 20, "WP": 20, "FEL": 20,
                    "Wounds": 0, "MoveSpeed": 4, "Fate": 2, "Resilience": 1, "Extra": 3}
attributes_Dwarf = {"WS": 30, "BS": 20, "S":  20, "T":  30, "AG": 10, "I":  20, "DEX": 30, "INT": 20, "WP": 40, "FEL": 10,
                    "Wounds": 0, "MoveSpeed": 3, "Fate": 0, "Resilience": 2, "Extra": 2}
attributes_Halfling = {"WS": 10, "BS": 30, "S":  10, "T":  20, "AG": 20, "I":  20, "DEX": 30, "INT": 20, "WP": 30, "FEL": 30,
                    "Wounds": 0, "MoveSpeed": 3, "Fate": 0, "Resilience": 2, "Extra": 3}
attributes_HighElf = {"WS": 30, "BS": 30, "S":  20, "T":  20, "AG": 30, "I":  40, "DEX": 30, "INT": 30, "WP": 30, "FEL": 20,
                    "Wounds": 0, "MoveSpeed": 5, "Fate": 0, "Resilience": 0, "Extra": 2}
attributes_WoodElf = {"WS": 30, "BS": 30, "S":  20, "T":  20, "AG": 30, "I":  40, "DEX": 30, "INT": 30, "WP": 30, "FEL": 20,
                    "Wounds": 0, "MoveSpeed": 5, "Fate": 0, "Resilience": 0, "Extra": 2}
attributes_Gnome = {"WS": 20, "BS": 10, "S":  10, "T":  15, "AG": 30, "I":  30, "DEX": 30, "INT": 30, "WP": 40, "FEL": 15,
                    "Wounds": 0, "MoveSpeed": 3, "Fate": 2, "Resilience": 0, "Extra": 2}
attributes_by_species = {'Human': attributes_Human, 'Dwarf': attributes_Dwarf, 'Halfling': attributes_Halfling, 'High Elf': attributes_HighElf, 'Wood Elf': attributes_WoodElf, 'Gnome': attributes_Gnome}

# ---- Skills
skills_start_Human = ["Animal Care", "Charm", "Cool", "Evaluate", "Gossip", "Haggle", "Language (Bretonnian)", "Language (Wastelander)", "Leadership", "Lore (Reikland)", "Melee (Basic)", "Ranged (Bow)"]
skills_start_Dwarf = ["Consume Alcohol", "Cool", "Endurance", "Entertain (Storytelling)", "Evaluate", "Intimidate", "Language (Khazalid)", "Lore (Dwarfs)", "Lore (Geology)", "Lore (Metallurgy)", "Melee (Basic)", "Trade (Any one)"]
skills_start_Halfling = ["Charm", "Consume Alcohol", "Dodge", "Gamble", "Haggle", "Intuition", "Language (Mootish)", "Lore (Reikland)", "Perception", "Sleight of Hand", "Stealth (Any one)", "Trade (Cook)"]
skills_start_HighElf = ["Cool", "Entertain (Sing)", "Evaluate", "Language (Eltharin)", "Leadership", "Melee (Basic)", "Navigation", "Perception", "Play (Any one)", "Ranged (Bow)", "Sail", "Swim"]
skills_start_WoodElf = ["Athletics", "Climb", "Endurance", "Entertain (Sing)", "Intimidate", "Language (Eltharin)", "Melee (Basic)", "Outdoor Survival", "Perception", "Ranged (Bow)", "Stealth (Rural)", "Track"]
skills_start_Gnome = ["Channelling (Ulgu)", "Charm", "Consume Alcohol", "Dodge", "Entertain (Any one)", "Gossip", "Haggle", "Language (Ghassally)", "Language (Magick)", "Language (Wastelander)", "Outdoor Survival", "Stealth (Any one)"]
skills_by_species = {'Human': skills_start_Human, 'Dwarf': skills_start_Dwarf, 'Halfling': skills_start_Halfling, 'High Elf': skills_start_HighElf, 'Wood Elf': skills_start_WoodElf, 'Gnome': skills_start_Gnome}
skills_all = {
    "Animal Care": ["INT", "advanced", []],
    "Animal Training": ["INT", "advanced", ["Demigryph", "Dog", "Horse", "Pegasus", "Pigeon"]],
    "Art": ["DEX", "basic", []],
    "Athletics": ["AG", "basic", []],
    "Bribery": ["FEL", "basic", []],
    "Channelling": ["WP", "advanced", ["Aqshy", "Azyr", "Chamon", "Dhar", "Ghur", "Ghyran", "Hysh", "Shyish", "Ulgu"]],
    "Charm": ["FEL", "basic", []],
    "Charm Animal": ["WP", "basic", []],
    "Climb": ["S", "basic", []],
    "Consume Alcohol": ["T", "basic", []],
    "Cool": ["WP", "basic", []],
    "Dodge": ["AG", "basic", []],
    "Drive": ["AG", "basic", []],
    "Endurance": ["T", "basic", []],
    "Entertain": ["FEL", "basic", ["Acting", "Comedy", "Singing", "Storytelling"]],
    "Evaluate": ["INT", "advanced", []],
    "Gamble": ["INT", "basic", []],
    "Gossip": ["FEL", "basic", []],
    "Haggle": ["FEL", "basic", []],
    "Heal": ["INT", "advanced", []],
    "Intimidate": ["S", "basic", []],
    "Intuition": ["I", "basic", []],
    "Language": ["INT", "advanced", ["Battle Tongue", "Bretonnian", "Classical", "Guilder", "Khazalid", "Magick", "Thief", "Tilean"]],
    "Leadership": ["FEL", "basic", []],
    "Lore": ["INT", "advanced", ["Engineering", "Geology", "Heraldry", "History", "Law", "Magick", "Metallurgy", "Science", "Theology"]],
    "Melee": ["WS", "basic", ["Basic", "Brawling", "Cavalry", "Fencing", "Flail", "Parry", "Pole-Arm", "Two-Handed"]],
    "Navigation": ["I", "basic", []],
    "Outdoor Survival": ["INT", "basic", []],
    "Perception": ["I", "basic", []],
    "Perform": ["AG", "advanced", ["Acrobatics", "Clowning", "Dancing", "Firebreathing", "Juggling", "Miming", "Rope Walking"]],
    "Pick Lock": ["DEX", "advanced", []],
    "Play": ["DEX", "advanced", ["Bagpipe", "Lute", "Harpsichord", "Horn", "Violin"]],
    "Pray": ["FEL", "advanced", []],
    "Ranged": ["BS", "advanced", ["Blackpowder", "Bow", "Crossbow", "Engineering", "Entangling", "Explosives", "Sling", "Throwing"]],
    "Research": ["INT", "advanced", []],
    "Ride": ["AG", "basic", ["Demigryph", "Great Wolf", "Griffon", "Horse", "Pegasus"]],
    "Row": ["S", "basic", []],
    "Sail": ["AG", "advanced", ["Barge", "Caravel", "Cog", "Frigate", "Wolfship"]],
    "Secret Signs": ["INT", "advanced", ["Grey Order", "Guild"]],
    "Set Trap": ["DEX", "advanced", []],
    "Sleight of Hand": ["DEX", "advanced", []],
    "Stealth": ["AG", "basic", ["Rural", "Underground", "Urban"]],
    "Swim": ["S", "advanced", []],
    "Track": ["I", "advanced", []],
    "Trade": ["DEX", "advanced", ["Apothecary", "Calligrapher", "Chandler", "Carpenter", "Cook", "Embalmer", "Smith", "Tanner"]]}
skills_all_basic = {key: item for key, item in skills_all.items() if item[1] == 'basic'}
skills_all_advanced = {key: item for key, item in skills_all.items() if item[1] == 'advanced'}

# ---- Talents
talents_start_Human = ["Doomed", "Savvy or Suave", "Random", "Random", "Random"]
talents_start_Dwarf = ["Magic Resistance", "Night Vision", "Read/Write or Relentless", "Resolute or Strong-minded", "Sturdy"]
talents_start_Halfling = ["Acute Sense (Taste)", "Night Vision", "Resistance (Chaos)", "Small", "Random", "Random"]
talents_start_HighElf = ["Acute Sense (Vision)", "Coolheaded or Savvy", "Night Vision", "Second Sight or Sixth Sense", "Read/Write"]
talents_start_WoodElf = ["Acute Sense (Vision)", "Hardy or Second Sight", "Night Vision", "Read/Write or Very Resilient", "Rover"]
talents_start_Gnome = ["Beneath Notice or Suffuse with Ulgu", "Luck or Mimic", "Night Vision", "Fisherman or Read/Write", "Second Sight or Sixth Sense", "Small"]
talents_by_species = {'Human': talents_start_Human, 'Dwarf': talents_start_Dwarf, 'Halfling': talents_start_Halfling, 'High Elf': talents_start_HighElf, 'Wood Elf': talents_start_WoodElf, 'Gnome': talents_start_Gnome}
talents_random = ["Acute Sense (Any one)", "Acute Sense (Any one)", "Acute Sense (Any one)", "Ambidextrous", "Ambidextrous", "Ambidextrous", "Animal Affinity", "Animal Affinity", "Animal Affinity", "Artistic", "Artistic", "Artistic", "Attractive", "Attractive", "Attractive", "Coolheaded", "Coolheaded", "Coolheaded", "Craftsman (Any one)", "Craftsman (Any one)", "Craftsman (Any one)", "Flee", "Flee", "Flee", "Hardy", "Hardy", "Hardy", "Hardy", "Lightning Reflexes", "Lightning Reflexes", "Lightning Reflexes", "Linguistics", "Linguistics", "Linguistics", "Luck", "Luck", "Luck", "Luck", "Marksman", "Marksman", "Marksman", "Mimic", "Mimic", "Mimic", "Night Vision", "Night Vision", "Night Vision", "Nimble Fingered", "Nimble Fingered", "Nimble Fingered", "Noble Blood", "Noble Blood", "Orientation", "Orientation", "Orientation", "Perfect Pitch", "Perfect Pitch", "Perfect Pitch", "Pure Soul", "Pure Soul", "Pure Soul", "Pure Soul", "Read/Write", "Read/Write", "Read/Write", "Resistance (Any one)", "Resistance (Any one)", "Resistance (Any one)", "Savvy", "Savvy", "Savvy", "Sharp", "Sharp", "Sharp", "Sixth Sense", "Sixth Sense", "Sixth Sense", "Sixth Sense", "Strong Legs", "Strong Legs", "Strong Legs", "Sturdy", "Sturdy", "Sturdy", "Suave", "Suave", "Suave", "Super Numerate", "Super Numerate", "Super Numerate", "Super Numerate", "Very Resilient", "Very Resilient", "Very Resilient", "Very Strong", "Very Strong", "Very Strong", "Warrior Born", "Warrior Born", "Warrior Born"]
talents_all = {
    "Accurate Shot": ["Bonus BS", "BS", "+[lvl]dmg on all ranged weapons.", []],
    "Acute Sense": ["Bonus I", "Perception", "Perception test using sense to spot imperceptible detail.", ["Vision", "Taste", "Touch", "Hearing", "Smell"]],
    "Aethyric Attunement": ["Bonus I", "Channel", "No miscast if double rolled on successful channel test.", []],
    "Alley Cat": ["Bonus I", "Stealth (Urban)", "Reverse dice of any failed test to check success.", []],
    "Ambidextrous": ["2", "WS", "Off hand -10. (0 if taken twice).", []],
    "Animal Affinity": ["Bonus WP", "Charm Animal", "All Bestial Trait creatures calm in your presence.", []],
    "Arcane Magic": ["1", "Spell", "Know one of Lores of magic.", ["Beasts", "Death", "Fire", "Heavens", "Metal", "Shadow", "Light", "Life", "Hedgecraft", "Necromancy"]],
    "Argumentative": ["Bonus FEL", "Charm (Debating)", "Choose either rolled SL or number rolled on units die.", []],
    "Artistic": ["Bonus DEX", "Trade (Artist)", "Produce precise sketches. Add Trade (Artist) to any career.", []],
    "Attractive": ["Bonus FEL", "Charm", "Choose either rolled SL or number rolled on units die.", []],
    "Battle Rage": ["Bonus WP", "Melee (Frenzied)", "You can end your Frenzy with successful Cool test at end of round.", []],
    "Beat Blade": ["Bonus WS", "Melee (Fencing)", "Before attack perform Melee (Fencing) test. Opponent - 1 Advantage (extra per SL).", []],
    "Beneath Notice": ["Bonus FEL", "Stealth", "Higher status tier ignore you / don't get advantage in combat with you.", []],
    "Berserk Charge": ["Bonus S", "Melee (Charge)", "+[lvl]dmg on charge.", []],
    "Blather": ["Bonus FEL", "Charm (Blather)", "Opposed Blather / Intelligence to give opponent stunned condition.", []],
    "Bless": ["1", "Pray", "You can empower prayers.", ["Manann", "Morr", "Myrmidia", "Ranald", "Taal", "Shallya", "Ulric", "Verena", "Sigmar", "Ulric"]],
    "Bookish": ["Bonus INT", "Research", "Reverse dice of any failed test to check success.", []],
    "Break and Enter": ["Bonus S", "Melee", "+[lvl]dmg against inanimate objects.", []],
    "Briber": ["Bonus FEL", "Bribery", "Reduce base cost of bribe by 10%[per lvl].", []],
    "Cardsharp": ["Bonus INT", "Gamble / Sleight of Hand", "Use either rolled SL or number rolled on units die.", []],
    "Careful Strike": ["Bonus I", "Attack", "Modify hit location +/-10[per lvl].", []],
    "Carouser": ["Bonus T", "Charm, Gossip, Consume Alcohol", "Reverse dice of failed Consume Alcohol test to score Success.", []],
    "Catfall": ["Bonus AG", "Athletics (When Falling)", "Reduce fall by [lvl]yard + 1 per SL for damage", []],
    "Cat-tongued": ["Bonus FEL", "Charm (Lying)", "Listeners do not oppose on Intuition.", []],
    "Chaos Magic": ["-", "Spell", "Learn chaos magic spells.", ["Nurgle", "Slaanesh", "Tzeentch"]],
    "Combat Aware": ["Bonus I", "Perception (Melee)", "Challenging Perception test to ignore surprise.", []],
    "Combat Master": ["Bonus AG", "Fight", "You count as +[lvl]person for determining opponents. Only when outnumbered.", []],
    "Combat Reflexes": ["Bonus I", "Combat", "Initiative counts +10[per lvl] for combat.", []],
    "Commanding Presence": ["Bonus FEL", "Leadership", "Lower status cannot resist Leadership with Opposed willpower.", []],
    "Concoct": ["Bonus INT", "Lore (Apothecary)", "Take one free Crafting Endeavour to use Trade (Apothecary) without need of a Workshop.", []],
    "Contortionist": ["Bonus AG", "Perform, Agility", "Squeeze and bend through unlikely gaps.", []],
    "Coolheaded": ["1", "", "Permanent +5 to WP.", []],
    "Crack the Whip": ["Bonus DEX", "Drive / Ride", "Fleeing / running on animal +1 Movement with whip.", []],
    "Craftsman": ["Bonus DEX", "Trade", "Add trade skill or -5xp cost to career", ["Apothecary", "Artist", "Bowyer", "Brewing", "Calligrapher", "Candlemaker", "Carpentry", "Cartographer", "Cook", "Cooper", "Embalmer", "Engineering", "Farmer", "Farrier", "Gem Cutter", "Goldsmith", "Gunsmith", "Herbalist", "Jewellry Making", "Landlord", "Manager", "Mason", "Merchant", "Miller", "Miner", "Prospector", "Shipwright", "Shoemaker", "Smithing", "Tailor", "Tanner", "Mason", "Smithing", "Carpentry", "Cook", "Engineering"]],
    "Criminal": ["-", "Income", "Take money as income.", []],
    "Deadeye Shot": ["1", "BS", "Pick any Hit Location.", []],
    "Dealmaker": ["Bonus FEL", "Haggle", "Reduce or increase price 10%.", []],
    "Detect Artefact": ["Bonus INT", "Intuition", "Intuition test determines if item is magical.", []],
    "Diceman": ["Bonus INT", "Gamble / Sleight of Hand", "Use either rolled SL or number on units die.", []],
    "Dirty Fighting": ["Bonus WS", "Melee (Brawling)", "+[lvl]dmg for Melee (Brawling).", []],
    "Disarm": ["Bonus I", "Melee", "Use action for Opposed Melee opponent loses held weapon.", []],
    "Distract": ["Bonus AG", "Athletics (Distract)", "Use move to Opposed Athletics / Cool. Opponent cannot gain advantage til next round.", []],
    "Doomed": ["1", "", "If character dies in this manner 1/2 xp goes to next one.", []],
    "Drilled": ["Bonus WS", "Melee", "When standing next to Ally with drilled and keep [lvl]Advantage that will be lost.", []],
    "Dual Wielder": ["Bonus AG", "Melee / Ranged", "Attacks with both weapons", []],
    "Embezzle": ["Bonus INT", "Intelligence", "Embezzling Opposed Intelligence test against employer to skim money.", []],
    "Enclosed Fighter": ["Bonus AG", "Dodge", "Ignore melee penalties in enclosed spaces.", []],
    "Etiquette": ["Bonus FEL", "Charm / Gossip", "Blend into chosen group", ["Criminals", "Cultists", "Guilders", "Nobles", "Scholar", "Servants", "Soldiers"]],
    "Fast Hands": ["Bonus DEX", "Sleight of Hand / Melee (Brawling)", "Passive Perception test against sleight of hand skill.", []],
    "Fast Shot": ["Bonus AG", "Ranged", "If loaded fire outside of normal initiative order.", []],
    "Fearless": ["Bonus WP", "Cool", "With Average Cool test ignore psychology against specific enemy.", ["Beastmen", "Greenskins", "Outlaws", "Vampires", "Watchmen", "Witches"]],
    "Feint": ["Bonus WS", "Melee (Fencing)", "Feint as action Opposed Melee test attack before next round cannot be Opposed.", []],
    "Field Dressing": ["Bonus INT", "Heal", "You may reverse dice results if it results in success.", []],
    "Fisherman": ["Bonus INT", "Fishing", "Find enough fish to feed your party.", []],
    "Flagellant": ["Bonus T", "Resisting Ruinous Powers", "Pray [lvl]Wounds. Frenzy immediately without testing.", []],
    "Flee": ["Bonus AG", "Athletics (Fleeing)", "Movement +1 when fleeing.", []],
    "Fleet Footed": ["1", "", "Permanent +1 to Movement.", []],
    "Frenzy": ["1", "", "You can Frenzy.", []],
    "Frightening": ["Bonus S", "", "Fear rating +[lvl].", []],
    "Furious Assault": ["Bonus AG", "Melee (Extra Attacks)", "Spend Advantage or move to make extra attack.", []],
    "Gregarious": ["Bonus FEL", "Gossip", "Reverse dice if allows a success.", []],
    "Gunner": ["Bonus DEX", "Reload", "Add SL to gunner level in extended reload.", []],
    "Hardy": ["Bonus T", "", "Add Bonus T to Wounds.", []],
    "Hatred": ["Bonus WP", "Willpower", "Hatred for chosen group.", ["Beastmen", "Greenskins", "Monsters", "Outlaws", "Sigmarites", "Undead", "Witches"]],
    "Holy Hatred": ["Bonus FEL", "Pray", "+[lvl]dmg with miracles.", []],
    "Holy Rage": ["Bonus WP", "Pray (Frenzied)", "Can invoke blessings and miracles when frenzied", []],
    "Holy Visions": ["Bonus I", "Intuition", "Intuition test on holy ground to receive visions", []],
    "Huffer": ["Bonus I", "Lore (River)", "Easier to traverse dangerous rivers", []],
    "Hunter’s Eye": ["Bonus I", "Trail", "Hunt down enough game to feed your group", []],
    "Impassioned Zeal": ["Bonus FEL", "Charm", "Double Fellowship to determine public influenced by your speech.", []],
    "Implacable": ["Bonus T", "Bleeding", "Ignore [lvl]Wound loss from bleeding", []],
    "In-fighter": ["Bonus DEX", "Melee (In-fighting)", "No penalties for fighting against opponent with longer weapon. +10 to hit opponent in in-fighting.", []],
    "Inspiring": ["Bonus FEL", "Leadership", "Increase amount of people influenced in war.", []],
    "Instinctive Diction": ["Bonus I", "Language (Magick)", "No miscast rolling double on sucessfull test.", []],
    "Invoke": ["1", "Miracle", "Perform miracles for God.", ["Manann", "Morr", "Myrmidia", "Ranald", "Taal", "Shallya", "Ulric", "Verena", "Sigmar", "Ulric"]],
    "Iron Jaw": ["Bonus T", "Endurance", "Challenging Endurance test to resist Stunned condition", []],
    "Iron Will": ["Bonus WP", "Cool", "Intimidate skill does not cause you Fear.", []],
    "Jump Up": ["1", "Athletics (Jumping)", "Challenging Agility test to regain feet when Prone.", []],
    "Kingpin": ["1", "", "Ignore status loss of Criminal Talent", []],
    "Lightning Reflexes": ["1", "", "Permanent +5 to AG", []],
    "Linguistics": ["Bonus INT", "Language", "Language exposed to counts as basic instead of advanced with successful Intelligence check.", []],
    "Lip Reading": ["Bonus I", "Perception", "Perception test to understand what is said", []],
    "Luck": ["Bonus FEL", "", "Permanent Fortune max == Fate max + Luck lvl", []],
    "Magical Sense": ["Bonus I", "Intuition", "Average Intuition check when encounter spellcaster", []],
    "Magic Resistance": ["1", "Willpower", "Must Oppose any spell with Willpowermay never learn magic", []],
    "Magnum Opus": ["-", "", "Create a high value piece of work.", []],
    "Marksman": ["1", "", "Permanent +5 to BS", []],
    "Master of Disguise": ["Bonus FEL", "Entertain (Acting)", "Expert at disguising yourself", []],
    "Master Orator": ["Bonus FEL", "Charm", "SL bonus equal to Master Orator Level to Charm in public speaking", []],
    "Master Tradesman": ["Bonus DEX", "Trade", "Reduce required SL of extended test of trade skill by talent level", ["Apothecary", "Calligrapher", "Chandler", "Carpenter", "Cook", "Embalmer", "Smith", "Tanner"]],
    "Master Craftsman": ["Bonus DEX", "Craft", "Reduce required SL of extended test of craft skill by talent level", ["Apothecary", "Artist", "Bowyer", "Brewing", "Calligrapher", "Candlemaker", "Carpentry", "Cartographer", "Cook", "Cooper", "Embalmer", "Engineering", "Farmer", "Farrier", "Gem Cutter", "Goldsmith", "Gunsmith", "Herbalist", "Jewellry Making", "Landlord", "Manager", "Mason", "Merchant", "Miller", "Miner", "Prospector", "Shipwright", "Shoemaker", "Smithing", "Tailor", "Tanner", "Mason", "Smithing", "Carpentry", "Cook", "Engineering"]],
    "Menacing": ["Bonus S", "Intimidate", "When using Intimidate, SL bonus + [lvl]", []],
    "Mimic": ["Bonus I", "Entertain (Acting)", "Replicate any accent with an Initiative test", []],
    "Night Vision": ["Bonus I", "Perception", "See clearly for 20 yards[per lvl].", []],
	"Nimble Fingered": ["1", "", "Permanent +5 to DEX", []],
    "Noble Blood": ["1", "Status", "Considered higher status than everyone else unless they have Noble Blood Talent", []],
    "Nose for Trouble": ["Bonus I", "Intuition", "Spot those seeking to cause trouble. Opposed if hiding", []],
    "Numismatics": ["Bonus I", "Evaluate", "Judge value of coins without test and can spot forged coins easily", []],
    "Old Salt": ["Bonus AG", "Sail", "Ignore negative modifiers at sailing tests.", []],
    "Orientation": ["Bonus I", "Navigation", "You automatically know which way is north", []],
    "Panhandle": ["Bonus FEL", "Charm (Begging)", "Charm test to be every half hour instead of full hour", []],
    "Perfect Pitch": ["Bonus I", "Entertain / Language", "You can replicate notes perfectly and add performer(sing) to your career", []],
    "Petty Magic": ["1", "", "You may cast a number of petty magics", []],
    "Pharmacist": ["Bonus INT", "Trade (Apothecary)", "Reverse any failed Apothecary tests if it means it will succeed", []],
    "Pilot": ["Bonus I", "Row / Sail", "Reverse test to navigate any dangerous waters if it will succeed", []],
    "Public Speaker": ["Bonus FEL", "Charm", "Influence a larger number of people when publicly speaking", []],
    "Pure Soul": ["Bonus WP", "", "Gain extra [lvl]Corruption Points, before taking a corruption test.", []],
    "Rapid Reload": ["Bonus DEX", "Reload", "Add [lvl]SL to any test of reload.", []],
    "Reaction Strike": ["Bonus I", "Initiative", "When charged, may attempt a Challenging Initiative test to gain immediate free attack.", []],
    "Read/Write": ["1", "", "You can read / write all of the languages you can speak.", []],
    "Relentless": ["Bonus AG", "Disengage", "When using advantage to disengage you may keep [lvl]Advantage.", []],
    "Resistance": ["Bonus T", "Resist Threat", "You automatically pass the first test to resist specified threat.", ["Chaos", "Disease", "Poison"]],
    "Resolute": ["Bonus S", "Charge", "Add +[lvl] to Strength bonus when charging.", []],
    "Reversal": ["Bonus WS", "Melee", "If you win Opposed test you may take all opponents advantage instead of gaining +1.", []],
    "Riposte": ["Bonus AG", "Melee", "If weapon has fast quality, you may cause +[lvl]dmg when defending against attacks.", []],
    "River Guide" : ["Bonus I", "Lore (River)", "You don’t need to test river with difficulty 40.", []],
    "Robust": ["Bonus T", "Defence", "Reduce all [lvl]dmg but still suffer minimum of 1 Wound.", []],
    "Roughrider": ["Bonus AG", "Ride (Horse)", "You can direct your mount to take an action not just a move.", []],
    "Rover": ["Bonus AG", "Stealth (Rural)", "By standers do not get passive Perception to spot Stealth in rural environment.", []],
    "Savant": ["Bonus INT", "Lore", "You automatically know a correct number of pieces of information about the relevant issue without Lore test.", ["Medicine", "Law"]],
	"Savvy": ["1", "", "Permanent +5 to INT.", []],
    "Scale Sheer Surface": ["Bonus S", "Climb", "Ignore [Climb test penalties to Climb sheer surfaces.", []],
    "Schemer": ["Bonus INT", "Intelligence", "GM will provide you with observations about current situation based on SL.", []],
    "Sea Legs": ["Bonus T", "Sea Sickness", "Ignore penalties to tests to ignore sea sickness.", []],
    "Seasoned Traveller": ["Bonus INT", "Lore (Local)", "Add Lore (Local) to current career.", []],
    "Second Sight": ["Bonus I", "Detect (Magic)", "You now have the sight to see winds of magic.", []],
	"Secret Identity": ["Bonus INT", "Entertain (Acting)", "You may use social status of disguised career.", []],
    "Shadow": ["Bonus AG", "Shadowing", "Use shadowing rules without doing combined test. Use Perception or Stealth.", []],
    "Sharp": ["1", "", "Permanent +5 to I.", []],
    "Sharpshooter": ["1", "Ranged", "Ignore size penalties to ranged tests.", []],
    "Shieldsman": ["Bonus S", "Melee (Parry)", "Parry test with shield When using Melee (Parry) with shield you gain advantage equal to this talent if you lose.", []],
    "Sixth Sense": ["Bonus I", "Intuition", "You get a strange feeling when you are in danger. You may ignore surprise on Intuition Test.", []],
    "Slayer": ["1", "Attack", "Use your opponent’s Toughness Bonus as your Strength Bonus if it is higher.", []],
    "Small": ["1", "", "You are small.", []],
    "Sniper": ["4", "Ranged", "No penalties for long range 1/2 penalties for extreme range.", []],
    "Speedreader": ["Bonus INT", "Research\Language", "Read and understand number of pages == SL + [lvl].", []],
    "Sprinter": ["Bonus S", "Athletics (Running)", "Movement counts as 1 higher when running.", []],
    "Step Aside": ["Bonus AG", "Dodge", "If you use Dodge to defend and win Opposed test you may move up to 2 yards without free attack penalty.", []],
    "Stone Soup": ["Bonus T", "Endurance (Hunger)", "1/2 food required to avoid penalties test for starvation every 3 days.", []],
    "Stout-hearted": ["Bonus WP", "Cool", "Cool test to Remove a Broken condition at the end of each of your Turns.", []],
    "Strider": ["Bonus AG", "Athletics", "You ignore movement penalties in chosen terrain.", ["Coastal", "Deserts", "Marshes", "Rocky", "Tundra", "Woodlands"]],
	"Strike Mighty Blow": ["Bonus S", "Attack", "Add +[lvl]dmg.", []],
    "Strike to Injure" : ["Bonus I", "Attack", "When caused Critical Wound, add +[lvl]dmg.", []],
    "Strike to Stun": ["Bonus WS", "Attack", "Ignore called shot penalty to use head hit location with weapon with pummel quality.", []],
	"Strong Back": ["Bonus S", "Row / Swim", "Add +[lvl] to Opposed Strength test and carry additional encumbrance.", []],
    "Strong Legs": ["Bonus S", "Athletics", "Add +[lvl] to SL in Athletics tests in leaping.", []],
	"Strong-minded": ["Bonus WP", "", "Permanent +[lvl] to maximum Resolve.", []],
    "Strong Swimmer": ["Bonus S", "Swim", "When holding breath add +[lvl] to Bonus T.", []],
	"Sturdy": ["Bonus S", "Strength (Lifting)", "Increase Encumbrance by [lvl]*2.", []],
    "Suave": ["1", "", "Permanent +5 to FEL.", []],
    "Suffuse with Ulgu": ["1", "Stealth (Any)", "Can use Channelling (Ulgu) instead of Stealth skill.", []],
    "Super Numerate": ["Bonus I", "Evaluate\Gamble", "You may use a simple calculator to represent what your PC is capable of mentally thinking.", []],
    "Supportive": ["Bonus FEL", "Social", "Use either SL or units rolled to influence superior.", []],
    "Sure Shot": ["Bonus I", "Ranged", "You may ignore [lvl]armour points.", []],
    "Surgery": ["Bonus INT", "Heal", "Treat any critical Wound marked as needing surgery. Extended Challenging Heal test to resolve internal healing issues.", []],
    "Tenacious": ["Bonus T", "Endurance", "Double the length of time needed to perform successful Endurance tests.", []],
    "Tinker": ["Bonus DEX", "Trade", "All non magical trade skills count as basic when repairing broken items.", []],
    "Tower of Memories": ["Bonus INT", "Inteligence", "Perfectly recall a sequence of facts as long as your Intelligence without having to make a test.", []],
    "Trapper": ["Bonus I", "Perception / Set Trap", "Can make Perception tests automatically without telling the GM of your intention.", []],
    "Trick Riding": ["Bonus AG", "Dodge (Horseback)", "Use Perform and Dodge skill whilst mounted. You can also move at start of round instead of your turn.", []],
    "Tunnel Rat": ["Bonus AG", "Stealth", "Bystanders get no passive Perception test on your Stealth underground.", []],
    "Unshakeable": ["Bonus WP", "Cool", "Perform Cool test against fear for gunpowder weapon fire, only if Wounded by bullet.", []],
    "Very Resilient": ["1", "", "Permanent +5 to T.", []],
    "Very Strong": ["1", "", "Permanent +5 to S.", []],
    "Warleader": ["Bonus FEL", "Leadership", "Add +[lvl] to subordinates SL in their Willpower test.", []],
    "War Wizard": ["1", "Spell", "Cast a spell with Casting number of 5 or less without using your action.", []],
    "Warrior Born": ["1", "", "Permanent +5 WS.", []],
    "Waterman": ["Bonus AG", "Sail", "Ignore negatives to tests when on a barge.", []],
    "Wealthy": ["-", "Earning", "When earning you secure +1 Gold Coins per[lvl].", []],
    "Well-prepared": ["Bonus I", "", "You may pull the trapping required for any situation provided it has Encumbrance of 0.", []],
    "Witch!": ["Bonus WP", "", "Add Language (Magick) to any career. For Resilience point you may manifest a spell from any Arcane Lore [lvl]times."]}

# ---- Other
thy_demise = ["thy death", "thy demise", "thy destruction", "thy dying", "thy doom", "thy downfall", "thine end", "thy fall"]
thy_demise_upper = ["Thy death", "Thy demise", "Thy destruction", "Thy dying", "Thy doom", "Thy downfall", "Thine end", "Thy fall"]
shall_be = ["shall be", "shall be", "shall be", "shall annunce", "shall mark", "shall herald"]
doomings_all = [random_pick(thy_demise_upper) + " shalt be a sticky one.", "Briny waters are poison to thy tongue", "When abandoned and alone, Morr shalt befriend thee.", "Beasts of the field have eyes for thee.", "Workings of the Witchling Star are " + random_pick(thy_demise) + ".", "A stalled blade bringeth a sharp end.", "The written word shall spell " + random_pick(thy_demise) + ".", "Thy body shalt break after thy spirit is crushed.", "Be not curious, only in ignorance art thou safe.", "Lack of breath fills thy last moments.", "Tie not the ribbon, nor the feather wear; yea, the peacock is thine enemy.", "Be not like Gnuthus, for thy master counts thy days.", "Three is thy number.", "A beast of brass bellows for thee.", "Ulric's cold hand shall lead thee to Morr.", "Watch for the cloven hoof, it is thine enemy.", "Eat neither the chitterlings nor the meat with tubes.", "As thee began, so shalt thou end.", "" + random_pick(thy_demise_upper) + " already knows thee, though knows it not.", "A stranger shalt bring thee more than a gift.", "Beware the young, the child, yea, even the babe.", "Take heed of Mammit and Mummit, for both see to lay thee low.", "Beware the purse, the sack, the velvet bag.", "The raven answers to Verena's call, yea, but Her scales are weighted.", "The tiniest of Taal's children shalt feast upon thy gut.", "The limner's line shalt be false.", "The holy day " + random_pick(shall_be) + " thy last day.", "Thou shalt die in bed, but not thine own!", "Thou shalt feed the barren soil with thy blood.", "When thy need is greatest, Shallya shalt turn Her back to thee.", "The scythe shall reap thy flesh.", "Thy soul, consumed with anger, shall be blinded to the unseen enemy.", "A friend in need brings " + random_pick(thy_demise) + " with speed.", "Thy last breath is drawn by Morrleib's light.", "Rats wearing the Horns of Taal shalt bite at thy heels.", "The sword shalt bring no justice, only suffering.", "The twin-tailed comet doth soar as thou dost fall.", "Water of all kinds is thy nemesis. ", "" + random_pick(thy_demise_upper) + " lieth hidden in the gloaming.", "High places promise a low end.", "Thy last exclamation is love.", "Beware the man that is not a man!", "Beware the Blind Maiden for Her scales shalt weight thy soul.", "Thy broken cart shalt herald " + random_pick(thy_demise) + ".", "The bun, the pastry, and the pie, yea, they art Morr's dishes!", "When the bell doth toll, it doth toll for thee.", "The laurel wreath hides a poisoned thorn.", "Longer not upon the privvie, nor the long drop neither.", "Cacklefax grips tight to coins of they doom.", "The hourglass shatters before thy last grain falls. ", "From the darkness cometh the raven.", "High-born blood shalt spill thine own.", "From above comes " + random_pick(thy_demise) + ".", "Plague and dark disease shalt bring thee to thine knees.", "Beware skin of green, it shalt afflict thee.", "Beware the verdant depths, within doth lie disaster.", "Be like the dancer for rude words bring Morr to thy side.", "The darkest rot shall eat thee from within.", "The Gods watch over " + random_pick(thy_demise) + ".", "Heed not the smith, in his artifice lies " + random_pick(thy_demise) + ".", "Wear not Grugni's baldric, for it shall carry " + random_pick(thy_demise) + ".", "Ready your coins on the thirteenth chime.", "The drummer beats out " + random_pick(thy_demise) + ".", "Katya's eye and vanity shalt speed thee to death.", "" + random_pick(thy_demise_upper) + " burns with flames unseen.", "An ill reputation shalt an ill man make.", "Morr finds thee naked as the day of thy birth.", "One bullock is safe, two bullocks bringeth the raven.", "Thirst not for blood, for it thirst for thee.", "In thy surest moment, thou shalt fail.", "Beware the beast in the wood, it is Morr's Messenger.", "Thou shalt sup from the cup of corruption.", "Fear the workings of the bonesaw, they are the source of " + random_pick(thy_demise) + ".", "Thy generosity bringeth tuppence and a sword in return.", "The withering eye is thy reward, and " + random_pick(thy_demise) + ".", "Torture and pain echo " + random_pick(thy_demise) + ".", "Follow not the steps of Dragomas.", "" + random_pick(thy_demise_upper) + " is wrought of violence.", "Those born of Rhy's cauldron shalt build thee a ravenstone.", "Absence makes thy heart grow weaker.", "The Mymidian spring is thy poison.", "Beware the crow, honour the raven.", "A greased goat is safer than keeping secrets.", "Manann's folk shalt love thee not.", "When thou art thrice haunted, Morr brings peace.", "Walk with Vobist, for certainty shall take thy breath.", "Beware the Lord of Murder's barb - it awaits to strike at thee from the darkness.", "The flashing blade shalt carve " + random_pick(thy_demise) + ".", "Fearsome engines belch forth fires of " + random_pick(thy_demise) + ".", "Thy end is not the end!", "" + random_pick(thy_demise_upper) + " is not " + random_pick(thy_demise) + "!", "As the piper plays his tune thy heart shall break.", "Green shalt undo thee.", "As dark news comes knocking, Morr shalt surely follow.", "Thou shalt stand like Wymund until Shallya courts thy enemies.", "Ranald shalt abandon thee.", "Think not beyond thy station, for change is the herald of Morr.", "Morr sends a maiden.", "Without the big cross, thou shalt make the wrong decision.", "Just before he uttered your doom, the doomsayer died, his face frozen in a mask of horror.", "When the beasts fall silent, " + random_pick(thy_demise) + " is near.", "A beast shall end thee, but the beast shall die first.", "A blunt knife will cause " + random_pick(thy_demise) + ".", "A child shall be Morr's herald.", "A consequence of lust will end ye.", "A curse " + random_pick(shall_be) + " " + random_pick(thy_demise) + ".", "A drunken blunder shall end your comedy.", "A four legged beast " + random_pick(shall_be) + " " + random_pick(thy_demise) + ".", "A helmet " + random_pick(shall_be) + " your undoing.", "A hero slays thee and with a good reason.", "A kiss shall end thy days.", "A passion that is forbidden to you " + random_pick(shall_be) + " your undoing.", "A raging fire shall claim thee.", "As sharp sting and then nothing.", "A short life but a merry one.", "A slip, a trip or a fall.", "A small misfortune leads to a bigger misfortune which leads to " + random_pick(thy_demise) + ".", "A spear will pass through your belly and you will linger long in pain before " + random_pick(thy_demise) + ".", "A sweet song accompanies thy dying breath.", "A terrible stench precedes " + random_pick(thy_demise) + ".", "A warriors's death, be thee warrior or not.", "Absence makes thy heart grow weaker.", "Accidents will happen.", "All is not as it seems.", "A great celebration you shall leave this world.", "An unmarked grave shall house thy bone.", "Arrogance will provide " + random_pick(thy_demise) + ".", "As dark clous gather, " + random_pick(thy_demise) + " looms over thee.", "As the leaves fall, so shall you.", "A black cat.", "A blunt knife will cause " + random_pick(thy_demise) + ".", "" + random_pick(thy_demise) + ", a brutal finish.", "A child shall be Morr's herald.", "A consequence of lust shall end thee.", "A coward's death, you shall suffer.", "A drunken blunder shall end thy comedy.", "A fear unnamed shall claim you.", "A filthy rat-thing " + random_pick(shall_be) + " " + random_pick(thy_demise) + ".", "A forbidden passion shall lay thee low.", "A great fish " + random_pick(shall_be) + " " + random_pick(thy_demise) + ".", "A green-skinned defiler " + random_pick(shall_be) + " " + random_pick(thy_demise) + ".", "A hero slays thee, and with good reason.", "A howling in the night announces " + random_pick(thy_demise) + ".", "Among a great celebration shall you leave this world.", "An ancient horror shall drag thee to madness before death.", "Another shall die so that you may live, but it is for nought.", "An unmarked grave is to be yours.", "A person of virtue shall slay thee.", "A profanity " + random_pick(shall_be) + " " + random_pick(thy_demise) + ".", "A raging fire " + random_pick(shall_be) + " " + random_pick(thy_demise) + ".", "A rope will break.", "Arrogance will steal your life.", "As dark clouds gather, " + random_pick(thy_demise) + " looms.", "A small misfortune shall lead you to ruin.", "A song on the wind shall lure thee to thy grave.", "A spotted dog " + random_pick(shall_be) + " " + random_pick(thy_demise) + ".", "As the leaves fall, so dost thou.", "As the snow falls, so dost thou.", "As the sun is rising, you shall forever rest.", "As the sun is setting, so shall you rest.", "A terrible pain in thy entrails.", "A thing so black, it has no name.", "A thing that gazes with no eye.", "A thing that should not be.", "A turning wheel shall break thee.", "A tusked beast " + random_pick(shall_be) + " " + random_pick(thy_demise) + ".", "A warrior's death shall be yours.", "A white cat shall be " + random_pick(thy_demise) + ".", "Beware the stench of death, else you will join it.", "Carried off on a sea of blood.", "Cold hands shall drag thee away.", "Death comes from above.", "Death comes from below.", "Death comes packaged as a gift.", "Death sings sweetly.", "Death strikes unseen.", "Death waits at the river's side.", "Death wears a black hat.", "Drowning, but not in water.", "Executed by the order of law.", "First, you shall be buried. Only later shall you die.", "Honeyed words shall curdle thy soul.", "Ill-gotten treasures.", "Indulgence in thy dark desires shall end thee.", "Manaan shall abandon thee.", "Misplaced faith " + random_pick(shall_be) + " " + random_pick(thy_demise) + ".", "Murdered by a stranger.", "Murdered by one you hold dear.", "One drink too many.", "On the battlefield.", "Pierced with countless blades.", "Poison in thy cup.", "Ranald shall forsake thee.", "Rhya shall forsake thee.", "Something too horrible to name.", "The gods shall forsake thee.", "The heirs of Sigmar shall perish, and you with them.", "The rains of spring bring with them disease and death.", "The summer sun shall bleach your bones.", "The walking dead will walk thou to death.", "The whisper of a foreigner shall undo you.", "They shall not know what to do with thy remains.", "Thou shalt be offered immortality, but 'tis a swindle.", "Thou shalt die from lack while surrounded by plenty.", "Thou shalt fall under the weight of thine own gold.", "Thou shalt share thy grave with a dog.", "Thrice shall the bell ring. There shall not be a fourth.", "Through a chink in thy armour.", "Through a window it comes.", "" + random_pick(thy_demise_upper) + " shall mirror thy birth.", "" + random_pick(thy_demise_upper) + " is so terrible, it cannot be uttered.", "Thy god shall abandon thee.", "Thy own faith shall end thee.", "Thy own strength shall end thee.", "Thy own weakness shall end thee.", "Under a cloudy sky, it comes.", "Under an oak shall you find " + random_pick(thy_demise) + ".", "Verena shall abandon thee.", "Vermin in multitudes.", "When all seems lost, it will be.", "Your blood shall pay for a forgotten debt.", "" + random_pick(thy_demise_upper) + " will come at the time you choose.", "Your father's sins shall doom you.", "Your final breath shall be of mountain air.", "Your remains shall never be found.", "You shall die many times before " + random_pick(thy_demise) + ".", "You shall have the last laugh.", "You shall perish amid gun smoke.", "You shall stray from a path and never return.", "You shall be ordered to " + random_pick(thy_demise) + ".", "You shall be within sight of salvation when the end comes.", "You will die so that another may live.", "You will linger long in the knowledge of " + random_pick(thy_demise) + "."]
trappings_by_class = {"Academic": "Clothing, Dagger, Pouch, Sling Bag containing Writing Kit and 1d10 sheets of Parchment", "Burgher": "Cloak, Clothing, Dagger, Hat, Pouch, Sling Bag containing Lunch", "Courtier": "Fine Clothing, Dagger, Pouch containing Tweezers, Ear Pick and a Comb", "Peasant": "Cloak, Clothing, Dagger, Pouch, Sling Bag containing Rations (1 day)", "Ranger": "Cloak, Clothing, Dagger, Pouch, Backpack containing Tinderbox, Blanket, Rations (1 day)", "Riverfolk": "Cloak, Clothing, Dagger, Pouch, Sling Bag containing a Flask of Spirits", "Rogue": "Clothing, Dagger, Pouch, Sling Bag containing 2 Candles, 1d10 Matches, a Hood or Mask", "Warrior": "Clothing, Hand Weapon, Dagger, Pouch"}
#mouseoverSkills = ["Art (Basic, Grouped), Dex, Create works of Art in your chosen medium.", "Athletics (Basic), Ag, Impacts on your movement abilities in combat.", "Bribery (Basic), Fel, Will tell you if a target may be bribed and allow you to guess a target number.", "Charm (Basic), Fel, Opposed Charm/Cool to influence.", "Charm Animal (Basic), WP, Influence an animal.", "Climb (Basic), S, How easy to scale surfaces.", "Cool (Basic), WP, Resist psychology and charm etc.", "Consume Alcohol (Basic), T, Ability to resist drunkenness.", "Dodge (Basic), Ag, Ability to avoid blows.", "Drive (Basic), Ag, Ability to guide vehicles.", "Endurance (Basic), T, Withstand hardship.", "Entertain (Basic, Grouped), Fel, Act/sing etc.", "Gamble (Basic), Int, Measure the likelihood of a bet paying off.", "Gossip (Basic), Fel, Learn interesting information.", "Haggle (Basic), Fel, Opposed test to reduce price.", "Intimidate (Basic), S, Bully your opponent.", "Intuition (Basic), I, Suss if something is wrong or give you an advantage in combat.", "Leadership (Basic), Fel, Issue orders or bolster psychology tests.", "Melee (Basic/Advanced, Grouped), WS, Represents training in weapons.", "Navigation (Basic), I, Find your way around.", "Outdoor Survival (Basic), Int, Forage, build shelters, fish etc.", "Perception (Basic), I, Ability to spot things/oppose stealth.", "Ride (Basic, Grouped, Ag, How skilled at riding animals.", "Row (Basic), S, How effective at rowing in dangerous situations.", "Stealth (Basic, Grouped), Ag, Concealment vs opposed perception.", "Animal Care (Advanced), Int, Tend animals if they become sick or wounded.", "Animal Training (Advanced, Grouped), Int, Train/intimidate animals.", "Channelling (Advanced, Grouped), WP, Ability to control the winds of magic.", "Evaluate (Advanced), Int, Determine the value of objects.", "Heal (Advanced), Int, Heal disease, infection, wound pg 123.", "Language (Advanced, Grouped), Int, Speak the tongue. Language(Magick) is used to cast spells.", "Lore (Advanced, Grouped), Int, formally taught in that area, allowing you to recall facts.", "Perform (Advanced, Grouped), Ag, Acrobatics, dancing etc.", "Pick lock (Advanced), Dex, Breaking into locks.", "Play (Advanced, Grouped), Dex, Playing an instrument.", "Pray (Advanced), Fel, Used to pray to a deity with blessings.", "Ranged (Advanced, Grouped), BS, Applies to using ranged weapons.", "Research (Advanced), Int, Pulling information from libraries, scrolls, etc.", "Sail (Advanced, Grouped), Ag, Manoeuvring with sails.", "Secret Signs (Advanced, Grouped), Int, How to use special markings or signs in a group.", "Set Trap (Advanced), Dex, Set and disarm traps", "Sleight of Hand (Advanced), Dex, Picking pockets etc", "Swim (Advanced), S, How well you can swim without drowning.", "Track (Advanced), I, Ability to follow trails and signs left by others.", "Trade (Advanced, Grouped), Dex, Earn money with your service"]
#mouseoverTalents = None # for (i in dataTalents) { mouseoverTalents.push(dataTalents[i][0]+" (Max "+dataTalents[i][1]+") "+dataTalents[i][2])
